// generated by build.php at 2020-09-15 08:02:03

use async_std::sync::Arc;
use core::operator::{
    http_api, http_server, simple_auth, sql, sql_runner, wasm, Monad, Source,
};

#[async_std::main]
async fn main() {
    let config0 = serde_json::from_str("{\"dsn\":\"mysql://openkg:some_pass@172.168.3.46:3307/openkg?readTimeout=3s&charset=utf8mb4\"}").unwrap();

    let op0 = Arc::new(sql::Sql::<::sqlx::mysql::MySql>::new(config0).await);

    let config1 = serde_json::from_str("{\"sql\":\"select * from user limit 10\"}").unwrap();

    let mut op1 = Arc::new(sql_runner::SqlRunner::new(config1));

    let config2 = serde_json::from_str("{\"uri\":\"/\",\"method\":\"GET\"}").unwrap();

    let mut op2 = Arc::new(http_api::HTTPAPI::new(config2));

    let config3 = serde_json::from_str("{\"listen_addr\":\"127.0.0.1:8088\"}").unwrap();

    let mut op3 = Arc::new(http_server::HTTPServer::new(config3));

    let config4 = serde_json::from_str("{\"uri\":\"/auth\",\"method\":\"GET\"}").unwrap();

    let mut op4 = Arc::new(http_api::HTTPAPI::new(config4));

    let config5 = serde_json::from_str("{\"secret\":\"abcd\"}").unwrap();

    let op5 = Arc::new(simple_auth::SimpleAuth::new(config5));

    let config6 = serde_json::from_str("{\"wat\":{\"FilePath\":\"/Users/xuzhiqiang/Desktop/workspace/opensource/rust_exp/hi/target/wasm32-wasi/debug/hi.wasi.wasm\"},\"wsgi\":true}").unwrap();

    let op6 = Arc::new(wasm::Wasm::new(config6));

    Arc::get_mut(&mut op1).unwrap().apply(Arc::downgrade(&op0));

    Arc::get_mut(&mut op2).unwrap().apply(Arc::downgrade(&op1));

    Arc::get_mut(&mut op3).unwrap().apply(Arc::downgrade(&op2));

    Arc::get_mut(&mut op4).unwrap().apply(Arc::downgrade(&op1));

    Arc::get_mut(&mut op4).unwrap().apply(Arc::downgrade(&op5));

    Arc::get_mut(&mut op3).unwrap().apply(Arc::downgrade(&op4));

    let mut handles = vec![];

    handles.push(::async_std::task::spawn(async move {
        match op3.start().await {
            Ok(_) => {}
            Err(err) => println!("err : {:?}", err),
        };
    }));

    handles.push(::async_std::task::spawn(async move {
        match op6.start().await {
            Ok(_) => {}
            Err(err) => println!("err : {:?}", err),
        };
    }));

    ::futures::future::join_all(handles).await;
}
